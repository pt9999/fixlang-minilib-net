module TcpTest;

import AsyncTask;

import Minilib.Net.Tcp;
import Minilib.Monad.FunctorM;
import Minilib.Text.StringEx;
import Minilib.Testing.UnitTest;

test_server_client: TestCase;
test_server_client = (
    make_test("test_server_client") $ |_|
    // TODO: use ephemeral port number. (https://stackoverflow.com/questions/1075399/how-to-bind-to-any-available-port)
    let host_port = "127.0.0.1:32987";
    let var_server_state = *Var::make("").lift;
    let server: IOFail () = do {
        let sock_listen = *Tcp::listen_tcp_server(host_port, 10);
        var_server_state.Var::set("started").lift;;
        let (sock, remote_addr) = *sock_listen.accept;
        //eprintln ("accepted: remote_address="+remote_addr.to_string).lift;;
        let bufsock = BufferedSocket::make(sock);
        let (line, bufsock) = *bufsock.read_line;
        assert_equal("request", "Request\n", line);;
        let bufsock = *bufsock.write_str("Response\n");
        let bufsock = *bufsock.flush;
        //eval sock_listen;
        pure $ ok()
    }.try(|errmsg|
        // In case server did not start properly
        var_server_state.Var::set("error");;
        pure $ err(errmsg)
    ).from_io_result;
    let client: IOFail () = do {
        var_server_state.Var::wait(|state| state != "").lift;;
        // To avoid deadlock, check if the server started successfully.
        if *var_server_state.get.lift == "error" {
            throw $ "server error"
        };
        let sock = *Tcp::connect_to_tcp_server(host_port);
        let bufsock = BufferedSocket::make(sock);
        let bufsock = *bufsock.write_str("Request\n");
        let bufsock = *bufsock.flush;
        let (line, bufsock) = *bufsock.read_line;
        assert_equal("response", "Response\n", line);;
        //eval sock;
        pure()
    };
    let iofail_array: Array (IOFail ()) = [server, client];
    let io_array: Array (IO (Result ErrMsg ())) = iofail_array.map(to_result);
    let task_array: Array (IOTask (Result ErrMsg ())) = *io_array.map_m(AsyncIOTask::make).lift;
    let res_array: Array (Result ErrMsg ()) = *task_array.map_m(get).lift;
    assert_equal("res_array", [ok(), ok()], res_array)
);

// Only test if name resolution succeeds without errors.
// NOTE: Name resolution results are not tested.
test_ipaddress_resolve: TestCase;
test_ipaddress_resolve = (
    make_table_test("test_ipaddress_resolve",
        [
            "localhost",
            "www.github.com",
            "www.google.com",
        ],
        |hostname|
        let ipaddress = *IpAddress::resolve(hostname);
        //println("resolved ip address: " + hostname + " ==> " + ipaddress.to_string).lift;;
        pure()
    )
);

main: IO ();
main = (
    [
        test_server_client,
        test_ipaddress_resolve,
        TestCase::empty
    ]
    .run_test_driver
);
